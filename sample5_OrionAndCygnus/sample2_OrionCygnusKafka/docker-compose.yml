version: "3.8"
services:
  # Orion is an NGSI-v2 context broker
  orion1:
    image: fiware/orion:4.1.0
    hostname: orion1
    container_name: fiware-orion1
    restart: on-failure
    depends_on:
      - mongo-db1
    expose:
      - "1026"
    ports:
      - "1026:1026"
    networks:
      fiware-network:
        ipv4_address: 172.19.1.2
    command: -dbURI mongodb://mongo-db1 -logLevel DEBUG -noCache
    healthcheck:
      test: curl --fail -s http://orion1:1026/version || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # MongoDB for Orion
  mongo-db1:
    image: mongo:6.0
    hostname: mongo-db1
    container_name: mongo-db1
    expose:
      - "27017"
    ports:
      - "27017:27017"
    networks:
      fiware-network:
        ipv4_address: 172.19.1.3
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      start_period: 10s
      interval: 10m
      timeout: 5s
      retries: 3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Cygnus agent
  cygnus:
    image: fiware/cygnus-ngsi:3.15.0
    hostname: cygnus
    container_name: cygnus
    restart: on-failure
    depends_on:
      - zookeeper
      - orion1
    expose:
      - 5050
      - 5080
      - 7890
    ports:
      - "5050:5050"
      - "5080:5080"
      - "7890:7890"
    networks:
      fiware-network:
        ipv4_address: 172.19.1.4
    environment:
      - CYGNUS_SKIP_CONF_GENERATION=true
      - CYGNUS_MULTIAGENT=false
      - CYGNUS_SERVICE_PORT=5050
      - CYGNUS_API_PORT=5080
      - CYGNUS_HOME=/opt/apache-flume
      - CYGNUS_LOG_LEVEL=DEBUG
    healthcheck:
      test: nc -z localhost 5050 || exit 1
      start_period: 10s
      interval: 10m
      timeout: 5s
      retries: 3
    command: /cygnus-entrypoint.sh
    volumes:
      - ./config/cygnus/:/opt/apache-flume/conf/
      - /var/run/docker.sock:/var/run/docker.sock

  zookeeper:
    image: zookeeper:3.9.2
    hostname: zookeeper
    container_name: zookeeper
    restart: always
    networks:
      fiware-network:
        ipv4_address: 172.19.1.5
    expose:
      - "2181"
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=10
      - ZOOKEEPER_SYNC_LIMIT=5
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka:
    ################################################
    # apache/kafka has KRaft mode enabled.
    # For this reason, use bitnami/kafka
    ################################################
    # image: apache/kafka:3.8.0
    image: bitnami/kafka:3.3.2
    hostname: kafka
    container_name: kafka
    expose:
      - "9092"
      - "9093"
    ports:
      - "9092:9092"
      - "9093:9093"
    networks:
      fiware-network:
        ipv4_address: 172.19.1.6
    depends_on:
      - zookeeper
      - cygnus
    environment:
      - KAFKA_BROKER_ID=0
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CLIENT_LISTENER_NAME=PLAINTEXT
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.19.1.6:9092
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_ZOOKEEPER_METADATA_MIGRATION_ENABLE=true
      - KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS=2000
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LOG_LEVEL=DEBUG
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024MiB
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  fiware-network:
    name: fiware-network
    ipam:
      config:
        - subnet: 172.19.1.0/24

volumes:
  mongo-db1:
  cygnus:
  kafka:

