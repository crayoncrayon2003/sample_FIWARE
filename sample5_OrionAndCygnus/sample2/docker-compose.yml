version: "3.8"
services:
  # Orion is an NGSI-v2 context broker
  orion1:
    image: quay.io/fiware/orion:3.11.0
    hostname: orion1
    container_name: fiware-orion1
    restart: on-failure
    depends_on:
      mongo-db1:
        condition: service_healthy
    expose:
      - "1026"
    ports:
      - "1026:1026"
    networks:
      fiware-network:
        ipv4_address: 172.19.1.2
    command: -dbhost mongo-db1 -logLevel DEBUG -noCache
    # environment:
    # - ORION_DBHOST=mongo-db1
    # - ORION_LOGLEVEL=DEBUG
    # - ORION_NOCACHE=true
    healthcheck:
      test: curl --fail -s http://orion1:1026/version || exit 1
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 5s

  # MongoDB for Orion
  mongo-db1:
    image: mongo:6.0
    hostname: mongo-db1
    container_name: mongo-db1
    expose:
      - "27017"
    ports:
      - "27017:27017"
    networks:
      fiware-network:
        ipv4_address: 172.19.1.3
    volumes:
      - ./data/mongo-db1:/data
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      start_period: 10s
      interval: 10m
      timeout: 5s
      retries: 3

  # Cygnus agent
  cygnus:
    image: fiware/cygnus-ngsi:3.13.0
    hostname: cygnus
    container_name: cygnus
    restart: on-failure
    depends_on:
     - kafka
     - zookeeper
    expose:
      - 5050
      - 5080
    ports:
      - "5050:5050"
      - "5080:5080"
    networks:
      fiware-network:
        ipv4_address: 172.19.1.4
    environment:
      - KAFKA_HOSTS=kafka:9092
      - CYGNUS_SKIP_CONF_GENERATION=true
      - CYGNUS_MULTIAGENT=false
      - CYGNUS_SERVICE_PORT=5050
      - CYGNUS_API_PORT=5080
      - CYGNUS_LOG_LEVEL=DEBUG
    healthcheck:
      test: nc -z localhost 5050 || exit 1"
      start_period: 10s
      interval: 10m
      timeout: 5s
      retries: 3
    command: /cygnus-entrypoint.sh
    volumes:
      - ./config/cygnus/:/opt/apache-flume/conf/

  zookeeper:
    image: zookeeper:3.9.2
    hostname: zookeeper
    container_name: zookeeper
    restart: always
    networks:
      fiware-network:
        ipv4_address: 172.19.1.5
    expose:
      - "2181"
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: yes
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    ################################################
    # apache/kafka has KRaft mode enabled.
    # For this reason, use bitnami/kafka
    ################################################
    # image: apache/kafka:3.8.0
    image: bitnami/kafka:3.3.2
    hostname: kafka
    container_name: kafka
    expose:
      - "9092"
    ports:
      - "9092:9092"
    networks:
      fiware-network:
        ipv4_address: 172.19.1.6
    depends_on:
      - zookeeper
    # deploy:
    #   replicas: 1
    #   restart_policy:
    #     condition: on-failure
    #     delay: 5s
    #     max_attempts: 3
    #     window: 120s
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=172.19.1.5:2181
      - KAFKA_ZOOKEEPER_CONNECT=172.19.1.5:2181
      - KAFKA_LISTENERS=PLAINTEXT://172.19.1.6:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.19.1.6:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: nc -z localhost 9092 || exit 1"
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  webserver:
    build:
      context: ./WebServer
      dockerfile: Dockerfile
    hostname: webserver
    container_name: webserver
    expose:
      - "8080"
    ports:
      - "8080:8080"
    networks:
      fiware-network:
        ipv4_address: 172.19.1.7
    depends_on:
      - zookeeper

networks:
  fiware-network:
    name: fiware-network
    ipam:
      config:
        - subnet: 172.19.1.0/24

volumes:
  mongo-db1:
  cygnus:
  kafka:

